# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'todo_list.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(430, 533)
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(8)
        MainWindow.setFont(font)
        MainWindow.setMouseTracking(False)
        MainWindow.setAnimated(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.add_pushbutton = QtWidgets.QPushButton(
            self.centralwidget, clicked=lambda: self.add_task())
        self.add_pushbutton.setGeometry(QtCore.QRect(15, 45, 100, 40))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(13)
        font.setBold(False)
        font.setWeight(50)
        self.add_pushbutton.setFont(font)
        self.add_pushbutton.setMouseTracking(True)
        self.add_pushbutton.setObjectName("add_pushbutton")
        self.todolist_listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.todolist_listWidget.setGeometry(QtCore.QRect(15, 90, 400, 361))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(14)
        self.todolist_listWidget.setFont(font)
        self.todolist_listWidget.setObjectName("todolist_listWidget")
        self.typetask_lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.typetask_lineEdit.setGeometry(QtCore.QRect(15, 7, 400, 35))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(10)
        self.typetask_lineEdit.setFont(font)
        self.typetask_lineEdit.setAutoFillBackground(False)
        self.typetask_lineEdit.setObjectName("typetask_lineEdit")
        self.delete_pushbutton = QtWidgets.QPushButton(
            self.centralwidget, clicked=lambda: self.delete_task())
        self.delete_pushbutton.setGeometry(QtCore.QRect(215, 45, 100, 40))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(13)
        font.setBold(False)
        font.setWeight(50)
        self.delete_pushbutton.setFont(font)
        self.delete_pushbutton.setMouseTracking(True)
        self.delete_pushbutton.setObjectName("delete_pushbutton")
        self.clear_pushbutton = QtWidgets.QPushButton(
            self.centralwidget, clicked=lambda: self.clear_task())
        self.clear_pushbutton.setGeometry(QtCore.QRect(315, 45, 100, 40))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(13)
        font.setBold(False)
        font.setWeight(50)
        self.clear_pushbutton.setFont(font)
        self.clear_pushbutton.setMouseTracking(True)
        self.clear_pushbutton.setObjectName("clear_pushbutton")
        self.done_pushbutton_2 = QtWidgets.QPushButton(
            self.centralwidget, clicked=lambda: self.done_task())
        self.done_pushbutton_2.setGeometry(QtCore.QRect(115, 45, 100, 40))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(13)
        font.setBold(False)
        font.setWeight(50)
        self.done_pushbutton_2.setFont(font)
        self.done_pushbutton_2.setMouseTracking(True)
        self.done_pushbutton_2.setObjectName("done_pushbutton")
        self.progress_progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progress_progressBar.setGeometry(QtCore.QRect(140, 460, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(12)
        self.progress_progressBar.setFont(font)
        self.progress_progressBar.setProperty("value", 0)
        self.progress_progressBar.setObjectName("progress_progressBar")
        self.progresslabel_label = QtWidgets.QLabel(self.centralwidget)
        self.progresslabel_label.setGeometry(QtCore.QRect(15, 455, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(12)
        self.progresslabel_label.setFont(font)
        self.progresslabel_label.setObjectName("progresslabel_label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 430, 21))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(8)
        self.menubar.setFont(font)
        self.menubar.setObjectName("menubar")
        self.menuOptions = QtWidgets.QMenu(self.menubar)
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(8)
        self.menuOptions.setFont(font)
        self.menuOptions.setObjectName("menuOptions")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionColour = QtWidgets.QAction(MainWindow)
        self.actionColour.setObjectName("actionColour")
        self.menubar.addAction(self.menuOptions.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate(
            "MainWindow", "Kai\'s To Do List"))
        self.add_pushbutton.setText(_translate("MainWindow", "Add"))
        self.typetask_lineEdit.setPlaceholderText(
            _translate("MainWindow", "Type a new task here"))
        self.delete_pushbutton.setText(_translate("MainWindow", "Delete"))
        self.clear_pushbutton.setText(_translate("MainWindow", "Clear"))
        self.done_pushbutton_2.setText(_translate("MainWindow", "Done"))
        self.progresslabel_label.setText(
            _translate("MainWindow", "My Progress:"))
        self.menuOptions.setTitle(_translate("MainWindow", "File"))
        self.actionColour.setText(_translate("MainWindow", "Colour"))

    # add task to list
    def add_task(self):

        # grab task in the task box
        item = self.typetask_lineEdit.text()

        if item:
            # add task into the list
            self.todolist_listWidget.addItem(item)

        # clear the task box
            self.typetask_lineEdit.setText("")

        # update progress
        self.update_progress()

    # delete task from list
    def delete_task(self):

        # grab the selected task
        clicked = self.todolist_listWidget.currentRow()

        # delete selected task from todo list
        self.todolist_listWidget.takeItem(clicked)

        # update progress
        self.update_progress()

    # clear all tasks from list
    def clear_task(self):
        self.todolist_listWidget.clear()

        # update progress
        self.update_progress()

    # strike out selected task
    def done_task(self):

        # grab the selected task
        item = self.todolist_listWidget.currentItem()

        # if selected task is done, undone it instead
        f = item.font()
        if f.strikeOut() == True:
            f.setStrikeOut(False)
            item.setFont(f)

        # strike out non-empty task
        elif item:
            f = item.font()
            f.setStrikeOut(True)
            item.setFont(f)

        # update progress
        self.update_progress()

    # track progress of tasks on progress bar
    def update_progress(self):

        # grab the total number of rows in the list
        total = self.todolist_listWidget.count()

        # if empty list, set value to 0
        if total == 0:
            value = 0

        # else count number of tasks done
        else:
            done = 0
            for i in range(total):
                item = self.todolist_listWidget.item(i)
                f = item.font()
                if f.strikeOut() == True:
                    done += 1

            # zero denominator case
            if done == 0:
                value = 0
            else:
                # calculate progress value
                value = round(done / total * 100, 2)

        # set the progress value accordingly
        self.progress_progressBar.setProperty("value", value)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
